package gov.nih.nci.cagrid.ncia.service.globus;


import java.rmi.RemoteException;
import javax.security.auth.Subject;
import javax.xml.namespace.QName;
import javax.xml.rpc.handler.MessageContext;

import org.globus.wsrf.impl.security.authorization.exceptions.AuthorizationException;
import org.globus.wsrf.impl.security.authorization.exceptions.CloseException;
import org.globus.wsrf.impl.security.authorization.exceptions.InitializeException;
import org.globus.wsrf.impl.security.authorization.exceptions.InvalidPolicyException;
import org.globus.wsrf.security.authorization.PDP;
import org.globus.wsrf.security.authorization.PDPConfig;
import org.w3c.dom.Node;


/** 
 * DO NOT EDIT:  This class is autogenerated!
 *
 * This is a PDP for use with the globus authorization callout.
 * This class will have a authorize<methodName> method for each method on this grid service.
 * The method is responsibe for making any authorization callouts required to satisfy the 
 * authorization requirements placed on each method call.  Each method will either return
 * apon a successful authorization or will throw an exception apon a failed authorization.
 * 
 * @created by Introduce Toolkit version 1.2
 * 
 */
public class NCIACoreServiceAuthorization implements PDP {

	public static final String SERVICE_NAMESPACE = "http://ncia.cagrid.nci.nih.gov/NCIACoreService";
	
	
	public NCIACoreServiceAuthorization() {
	}
	
	protected String getServiceNamespace(){
		return SERVICE_NAMESPACE;
	}
	
	public static String getCallerIdentity() {
		String caller = org.globus.wsrf.security.SecurityManager.getManager().getCaller();
		if ((caller == null) || (caller.equals("<anonymous>"))) {
			return null;
		} else {
			return caller;
		}
	}
					
	public static void authorizeGetMultipleResourceProperties() throws RemoteException {
		
		
	}
					
	public static void authorizeGetResourceProperty() throws RemoteException {
		
		
	}
					
	public static void authorizeQueryResourceProperties() throws RemoteException {
		
		
	}
					
	public static void authorizeGetServiceSecurityMetadata() throws RemoteException {
		
		
	}
					
	public static void authorizeQuery() throws RemoteException {
		
		
	}
					
	public static void authorizeRetrieveDicomData() throws RemoteException {
		
		
	}
					
	public static void authorizeRetrieveDicomDataByPatientId() throws RemoteException {
		
		
	}
					
	public static void authorizeRetrieveDicomDataBySeriesUID() throws RemoteException {
		
		
	}
					
	public static void authorizeRetrieveDicomDataByStudyUID() throws RemoteException {
		
		
	}
					
	public static void authorizeRetrieveDicomDataByPatientIds() throws RemoteException {
		
		
	}
					
	public static void authorizeRetrieveDicomDataBySeriesUIDs() throws RemoteException {
		
		
	}
					
	public static void authorizeRetrieveDicomDataByStudyUIDs() throws RemoteException {
		
		
	}
					
	public static void authorizeGetNumberOfStudyTimePointForPatient() throws RemoteException {
		
		
	}
					
	public static void authorizeRetrieveDicomDataByNthStudyTimePointForPatient() throws RemoteException {
		
		
	}
					
	public static void authorizeGetRepresentativeImageBySeries() throws RemoteException {
		
		
	}
	
	
	public boolean isPermitted(Subject peerSubject, MessageContext context, QName operation)
		throws AuthorizationException {
		
		if(!operation.getNamespaceURI().equals(getServiceNamespace())){
		  return false;
		}
		if(operation.getLocalPart().equals("getMultipleResourceProperties")){
			try{
				authorizeGetMultipleResourceProperties();
				return true;
			} catch (Exception e){
				e.printStackTrace();
				return false;
			}
		} else if(operation.getLocalPart().equals("getResourceProperty")){
			try{
				authorizeGetResourceProperty();
				return true;
			} catch (Exception e){
				e.printStackTrace();
				return false;
			}
		} else if(operation.getLocalPart().equals("queryResourceProperties")){
			try{
				authorizeQueryResourceProperties();
				return true;
			} catch (Exception e){
				e.printStackTrace();
				return false;
			}
		} else if(operation.getLocalPart().equals("getServiceSecurityMetadata")){
			try{
				authorizeGetServiceSecurityMetadata();
				return true;
			} catch (Exception e){
				e.printStackTrace();
				return false;
			}
		} else if(operation.getLocalPart().equals("query")){
			try{
				authorizeQuery();
				return true;
			} catch (Exception e){
				e.printStackTrace();
				return false;
			}
		} else if(operation.getLocalPart().equals("retrieveDicomData")){
			try{
				authorizeRetrieveDicomData();
				return true;
			} catch (Exception e){
				e.printStackTrace();
				return false;
			}
		} else if(operation.getLocalPart().equals("retrieveDicomDataByPatientId")){
			try{
				authorizeRetrieveDicomDataByPatientId();
				return true;
			} catch (Exception e){
				e.printStackTrace();
				return false;
			}
		} else if(operation.getLocalPart().equals("retrieveDicomDataBySeriesUID")){
			try{
				authorizeRetrieveDicomDataBySeriesUID();
				return true;
			} catch (Exception e){
				e.printStackTrace();
				return false;
			}
		} else if(operation.getLocalPart().equals("retrieveDicomDataByStudyUID")){
			try{
				authorizeRetrieveDicomDataByStudyUID();
				return true;
			} catch (Exception e){
				e.printStackTrace();
				return false;
			}
		} else if(operation.getLocalPart().equals("retrieveDicomDataByPatientIds")){
			try{
				authorizeRetrieveDicomDataByPatientIds();
				return true;
			} catch (Exception e){
				e.printStackTrace();
				return false;
			}
		} else if(operation.getLocalPart().equals("retrieveDicomDataBySeriesUIDs")){
			try{
				authorizeRetrieveDicomDataBySeriesUIDs();
				return true;
			} catch (Exception e){
				e.printStackTrace();
				return false;
			}
		} else if(operation.getLocalPart().equals("retrieveDicomDataByStudyUIDs")){
			try{
				authorizeRetrieveDicomDataByStudyUIDs();
				return true;
			} catch (Exception e){
				e.printStackTrace();
				return false;
			}
		} else if(operation.getLocalPart().equals("getNumberOfStudyTimePointForPatient")){
			try{
				authorizeGetNumberOfStudyTimePointForPatient();
				return true;
			} catch (Exception e){
				e.printStackTrace();
				return false;
			}
		} else if(operation.getLocalPart().equals("retrieveDicomDataByNthStudyTimePointForPatient")){
			try{
				authorizeRetrieveDicomDataByNthStudyTimePointForPatient();
				return true;
			} catch (Exception e){
				e.printStackTrace();
				return false;
			}
		} else if(operation.getLocalPart().equals("getRepresentativeImageBySeries")){
			try{
				authorizeGetRepresentativeImageBySeries();
				return true;
			} catch (Exception e){
				e.printStackTrace();
				return false;
			}
		} 		
		return false;
	}
	

	public Node getPolicy(Node query) throws InvalidPolicyException {
		return null;
	}


	public String[] getPolicyNames() {
		return null;
	}


	public Node setPolicy(Node policy) throws InvalidPolicyException {
		return null;
	}


	public void close() throws CloseException {


	}


	public void initialize(PDPConfig config, String name, String id) throws InitializeException {

	}
	
	
}
